/*
Router : 통신, 외부의 페이지로 이동해주기 위한 hook같은 개념

mpa(multiple page application) ; 페이지가 여러 개(ex. html구성방식)
-여러 개의 페이지로 구성된 app을 말한다.
-mpa는 ssr(server side rendering)방식으로 랜더링한다.
-새로운 페이지를 요청(링크를 클릭했을 경우)을 할 때마다 html, css, js와 같은 랜더링에 필요한 요소들을 모두 다운로드 한다.
(단점) 현재 페이지를 새로고침해도 새로 랜더링을 한다는 단점이 있다.

장점 :
1. seo(검색엔진,에스이오)에서 유리한 위치를 가져온다.(모든 정보 담겨져 있기 때문에 검색을 할 때 상위로 노출될 확률 높아지고, 정확한 검색어를 가져올 수 있다.)
2. 최초 로딩이 짧다.(필요한 요소들만 랜더링을 먼저 하기 때문에)

단점 : 
1. 페이지를 요청할때마다 리로딩(새로고침)을 한다. - 새로운 페이지마다 랜더링이 새로되는 방식 때문이다. (링크 이동 시 페이지 깜빡거림 -> mpa방식 웹페이지; 페이지의 모든 정보를 새로 랜더링하는 순간)
2. 모바일 앱 개발시 백엔드 작업이 따로 필요하다.
3. 로딩 관련해서 성능 저하나 메모리 부하가 생길 수 있다.

--------
spa(single page application)
-하나의 페이지로 구성된 app이다.
-spa는 랜더링에 필요한 html, css, js들을 최초 요청시에 모든 요소들을 한 번에 다 다운받는다.
그 후에 서버 요청에 따라 필요한 데이터만 전달받아서 페이지를 랜더링하는 방식이다. 
(대표적으로 react와 vue가 있음)
-spa는 csr(client side rendering)방식으로 랜더링한다.

장점(리액트로 app을 만드는 이유) :
1. 필요한 부분만 랜더링하기 때문에 성능적으로 mpa보다 우위를 가져올 수 있다.
2. 페이지별로 작업하는 것이 아닌 컴포넌트 방식으로 작업하기 때문에 유지보수나 생산성이 높다.(훨씬 쉬움)
3. 모바일 앱 관련해서 별도의 백엔드 작업을 필요로 하지 않는다.

단점 : 
1. 구동속도가 조금 느리다.(최초로 모든 데이터를 다운받기 때문에 최초로딩은 느리지만, 그 이후에는 mpa 보다 빠르다)
2. seo가 (mpa보다) 상대적으로 불리하다.(ssr방식으로 우회할 수는 있지만, 아직은 좀 불안한 부분이 있음)

react에서는 a태그를 사용할 수 없다.
a태그의 목적은 태그를 클릭했을 때 페이지로 이동하는 방식의 태그다.(깜빡거리는 현상 생김)
react에선 a태그 대신 react-router를 이용해야 한다.(react는 react-router를 사용해서 페이지 이동해야 함)
-----

~react-router> yarn add react-router-dom으로 설치해야 한다. -> 설치 완료되면 package.json에 "react-router-dom"가 생김
----
router관련 명령어
- Routes : Router를 감싸는 부모 태그다.(여러 개의 router를 연결하는 데 사용한다.)
- Route : 경로와 구성요소의 연결되는 통로 역할을 해준다. path와 element로 연결된 요소를 랜더링
- Link : 전체 페이지를 로드하지 않으며, 페이지 간 이동에 사용되는 요소다.
Link가 하는 일은 a태그처럼 페이지 호출하는건 아니고, 어느 페이지로 갔는지 알려주기 위한 목적으로만 쓰임(실제로 페이지 이동은X, Link에서 설정한 경로로 가면 어떤 컴포넌트가 들어오게 해달라고 알려주는 용도임.)

* 깜빡임 없이 페이지 이동 가능

*/