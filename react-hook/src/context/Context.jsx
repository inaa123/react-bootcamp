import React from 'react'

function Context() {
    /*
    기존에 값을 하위요소로 전달하는 방법은 props를 사용해서 전달하는 방법을 사용하지만,
    단점은 부모 자식 관계에서만 값을 전달하고 전달받을 수 있다는 단점이 있었다.
    여러 컴포넌트에서 값을 관리하기에는 구조가 복잡해지는 문제가 있었다.
    (props는 직접적인 하위 요소만 전달 가능하고, 하위의 하위로 전달하려면 하위요소로 전달하고, 하위요소가 또 그 하위요소로 전달해야함 -> 구조가 복잡)

    reduct(값을 전달하는 요소)라는 요소가 있었지만, context라는 hook이 새로 새역나면서 전역으로 값을 관리할 수 있게 되었다.

    context는 props로 값을 넘거지 않아도 전역으로 값을 공유받을 수 있다.

    장점
    - 하위요소를 만들지 않아도 전역으로 관리할 수 있다.
    - 전역상태의 값이다 보니 값을 관리하기가 편해진다.

    단점(주의점)
    - context로 값을 변경하면 해당 context를 사용하는 모든 요소들이 리랜더링 되므로 대처방법이 필요하다.
    (전역 -> 관리는 편하지만, 어딘가에서 오류날 확률도 높음. 그러므로 context너무 남발하지 않는게 좋다.)

    context자주 볼 수 있음
    ex)다크모드 : 모든 구성요소들이 다크모드 영향을 받음(반전이 되는 등).
    
    
    */
    return (
        <div>
                     
        </div>
    )
}

export default Context
